struct Node
{
  int data;
  Node *link;
};

typedef Node* NodePtr;

void head_insert(NodePtr& head, int the_data);
// head should be the top node of the linked list.
// the_data is the data you want to insert into the
// head of the linked list.
// Post-insertion: you should have a new head, with
// your new data, and the new head should point to the
// previous head. Everything else unchanged.
NodePtr search(NodePtr head, int target);
// search() should find the first instance of a node
// whose data attribute equals the target.
// It searches from the head and then keeps going down
// the links.
// Returns pointer to the relevant node.

void head_insert(NodePtr& head, int the_data)
{
  NodePtr temp_ptr;
  temp_ptr = new Node;
  // Remember struct Node has attributes:
  // int data, and Node *link.
  temp_ptr->data = the_data;
  temp_ptr->link = head;
  head = temp_ptr;
}

NodePtr search(NodePtr head, int target)
{
  NodePtr temp_ptr;
  temp_ptr = head;
  bool notfound_data = true;
  // Edge case: in case the first node contains the right value.
  // Then you must set the flag notfound_data to false, and return
  // the head pointer instead of crawling down the chain.
  if (temp_ptr->data == target)
    {
      notfound_data = true;
    }
  while(notfound_data)
    {
      // While data is not yet found, move the temp_ptr to the new node.
      temp_ptr = temp_ptr->link;
    }
  return temp_ptr;
}
